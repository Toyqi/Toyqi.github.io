<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Toyqi的程序世界</title><link href="http://toyqi.github.io/" rel="alternate"></link><link href="http://toyqi.github.io/feeds/tech.atom.xml" rel="self"></link><id>http://toyqi.github.io/</id><updated>2013-09-13T00:00:00+08:00</updated><entry><title>Python 计算 Fibonacci 数列</title><link href="http://toyqi.github.io/pages/2013/09/13/python_fibonacci.html" rel="alternate"></link><updated>2013-09-13T00:00:00+08:00</updated><author><name>Toyqi</name></author><id>tag:toyqi.github.io,2013-09-13:pages/2013/09/13/python_fibonacci.html</id><summary type="html">&lt;p&gt;今天小伙伴去某度面试，有一道有意思的逻辑思维题与大家分享一下。大概意思是某栋楼有100个台阶，每次可以上一阶或两阶，走到楼顶共有多少种走法？&lt;/p&gt;
&lt;p&gt;最简单的思考：&lt;/p&gt;
&lt;p&gt;一共1个台阶的话有1种走法.&lt;/p&gt;
&lt;p&gt;一共2个台阶的话有2种走法.&lt;/p&gt;
&lt;p&gt;一共3个台阶的话有3种走法.&lt;/p&gt;
&lt;p&gt;一共4个台阶的话有5种走法.&lt;/p&gt;
&lt;p&gt;一共5个台阶的话有8种走法.&lt;/p&gt;
&lt;p&gt;一共6个台阶的话有13种走法.&lt;/p&gt;
&lt;p&gt;一共7个台阶的话有21种走法.&lt;/p&gt;
&lt;p&gt;一共8个台阶的话有34种走法.&lt;/p&gt;
&lt;p&gt;一共9个台阶的话有55种走法.&lt;/p&gt;
&lt;p&gt;一共10个台阶的话有89种走法.&lt;/p&gt;
&lt;p&gt;一共11个台阶的话有144种走法.&lt;/p&gt;
&lt;p&gt;一共12个台阶的话有233种走法.&lt;/p&gt;
&lt;p&gt;一共13个台阶的话有377种走法.&lt;/p&gt;
&lt;p&gt;一共14个台阶的话有610种走法.&lt;/p&gt;
&lt;p&gt;一共15个台阶的话有987种走法.&lt;/p&gt;
&lt;p&gt;一共16个台阶的话有1597种走法.&lt;/p&gt;
&lt;p&gt;一共17个台阶的话有2584种走法.&lt;/p&gt;
&lt;p&gt;一共18个台阶的话有4181种走法.&lt;/p&gt;
&lt;p&gt;一共19个台阶的话有6765种走法.&lt;/p&gt;
&lt;p&gt;一共20个台阶的话有10946种走法.&lt;/p&gt;
&lt;p&gt;一共21个台阶的话有17711种走法.&lt;/p&gt;
&lt;p&gt;一共22个台阶的话有28657种走法.&lt;/p&gt;
&lt;p&gt;一共23个台阶的话有46368种走法.&lt;/p&gt;
&lt;p&gt;一共24个台阶的话有75025种走法.&lt;/p&gt;
&lt;p&gt;一共25个台阶的话有121393种走法.&lt;/p&gt;
&lt;p&gt;一共26个台阶的话有196418种走法.&lt;/p&gt;
&lt;p&gt;一共27个台阶的话有317811种走法.&lt;/p&gt;
&lt;p&gt;一共28个台阶的话有514229种走法.&lt;/p&gt;
&lt;p&gt;一共29个台阶的话有832040种走法.&lt;/p&gt;
&lt;p&gt;一共30个台阶的话有1346269种走法.&lt;/p&gt;
&lt;p&gt;一共31个台阶的话有2178309种走法.&lt;/p&gt;
&lt;p&gt;一共32个台阶的话有3524578种走法.&lt;/p&gt;
&lt;p&gt;一共33个台阶的话有5702887种走法.&lt;/p&gt;
&lt;p&gt;一共34个台阶的话有9227465种走法.&lt;/p&gt;
&lt;p&gt;一共35个台阶的话有14930352种走法.&lt;/p&gt;
&lt;h3&gt;这不正是个斐波那契（Fibonacci数列）嘛！&lt;/h3&gt;
&lt;p&gt;好，很好。&lt;/p&gt;
&lt;p&gt;那就开始就是干的节奏。&lt;/p&gt;
&lt;p&gt;使用 Python 计算 Fibonacci 数列。&lt;/p&gt;
&lt;h4&gt;Fobonacci Recursion&lt;/h4&gt;
&lt;h4&gt;递归法：有很多重复计算，且随着n的增加，重复计算的量成指数级增长。&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="nl"&gt;else:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;我的机器运算能力有点弱，自己run去吧，^_^。&lt;/h5&gt;
&lt;h5&gt;Fibonacci Iteration&lt;/h5&gt;
&lt;h5&gt;递推法：为了避免递归中的重复计算。&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;cd 到文件目录下，使用 time 命令，运行 time python Fibonacci.py &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; 
&lt;span class="mi"&gt;354224848179261915075&lt;/span&gt;

&lt;span class="n"&gt;real&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;m0&lt;/span&gt;&lt;span class="mf"&gt;.021&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;m0&lt;/span&gt;&lt;span class="mf"&gt;.020&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;m0&lt;/span&gt;&lt;span class="mf"&gt;.000&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Fibonacci Optimization&lt;/h4&gt;
&lt;h4&gt;Python Decorators&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;caches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_cache&lt;/span&gt;

&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样，cd 到文件目录下，使用 time 命令，运行 time python Fibonacci.py &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; 
&lt;span class="mi"&gt;354224848179261915075&lt;/span&gt;

&lt;span class="n"&gt;real&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;m0&lt;/span&gt;&lt;span class="mf"&gt;.026&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;user&lt;/span&gt;    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;m0&lt;/span&gt;&lt;span class="mf"&gt;.020&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;m0&lt;/span&gt;&lt;span class="mf"&gt;.004&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Fibonacci Sequence.&lt;/h4&gt;
&lt;h4&gt;Have fun!&lt;/h4&gt;</summary><category term="python"></category><category term="Fibonacci"></category></entry><entry><title>git - 简易指南</title><link href="http://toyqi.github.io/pages/2013/09/10/git_guide.html" rel="alternate"></link><updated>2013-09-10T00:00:00+08:00</updated><author><name>Toyqi</name></author><id>tag:toyqi.github.io,2013-09-10:pages/2013/09/10/git_guide.html</id><summary type="html">&lt;h2&gt;安装&lt;/h2&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/git-osx-installer/downloads/list?can=3"&gt;下载git OSX版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git"&gt;下载git Linux版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/msysgit/downloads/list?can=3"&gt;下载git Windows版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;创建新仓库&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;创建新文件夹，打开，执行命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以创建新的git仓库。&lt;/p&gt;
&lt;h2&gt;检出仓库&lt;/h2&gt;
&lt;p&gt;执行如下命令创建一个本地仓库的克隆版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是远端服务器上的仓库，命令将是这个样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;工作流&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;你的本地仓库由git维护的三棵"树"组成。第一个是你的__工作目录__,它持有实际文件；第二个是__缓存区(Index)&lt;strong&gt;，它性格缓存区域，临时保存你的改动；最后是__HEAD&lt;/strong&gt;，指向你最近一次提交后的结果。&lt;/p&gt;
&lt;h2&gt;添加与提交&lt;/h2&gt;
&lt;p&gt;你可以计划改动（把它们添加到缓存区），使用如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是git基本功做流程的第一步；使用如下命令以实际提交改动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="err"&gt;“代码提交信息”&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你的改动已经提交到HEAD，但是还没到你的远端仓库。&lt;/p&gt;
&lt;h2&gt;推送改动&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;你的改动现在已经在本地仓库的__HEAD__中了。执行如下命令旧爱那个改动提交到远端仓库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以把master换成你想要推送的任何分支。&lt;/p&gt;
&lt;p&gt;如果你还没有克隆现有仓库，并与将你的仓库连接到某个远程服务器，可以使用如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此你就能够将你的改动推送到所添加的服务器上去了。&lt;/p&gt;
&lt;h2&gt;分支&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。
创建一个叫做“feature_x”的分支，并切换过去：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;feature_x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;切换回主分支：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再把新建的分支删掉：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;feature_x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;更新与合并&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;要更新你的本地仓库至最新改动，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。
要合并其他分支到你的当前分支（例如 master），执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在合并改动之前，也可以使用如下命令查看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;source_branch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;target_branch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;标签&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="mf"&gt;1.0.0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b2e1d63ff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。&lt;/p&gt;
&lt;h2&gt;替换本地改动&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。&lt;/p&gt;
&lt;p&gt;假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;
    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;hard&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;有用的贴士&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;内建的图形化 git：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;gitk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;彩色的 git 输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;显示历史记录时，只显示一行注释信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pretty&lt;/span&gt; &lt;span class="n"&gt;oneline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;交互地添加文件至缓存区：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;链接与资源&lt;/h2&gt;
&lt;h3&gt;图形化界面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.git-tower.com/"&gt;Tower (OSX)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itunes.apple.com/cn/app/id403388357?mt=12"&gt;GitBox (OSX)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sourcetreeapp.com/"&gt;Source Tree (OSX, free)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mac.github.com/"&gt;GitHub for Mac (OSX, free)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gitx.laullon.com/"&gt;GitX (L) (OSX, open source)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;指南与手册&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://progit.org/book/"&gt;专业git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/"&gt;GitHub Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.git-scm.com/"&gt;Git 社区参考书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://marklodato.github.io/visual-git-guide/index-en.html"&gt;图形化 Git 指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy it.&lt;/p&gt;</summary><category term="git"></category></entry><entry><title>如何成为一名黑客(转)</title><link href="http://toyqi.github.io/pages/2013/08/06/become_a_hack.html" rel="alternate"></link><updated>2013-08-06T00:00:00+08:00</updated><author><name>Toyqi</name></author><id>tag:toyqi.github.io,2013-08-06:pages/2013/08/06/become_a_hack.html</id><summary type="html">&lt;p&gt;这是一份大名鼎鼎的黑客手册，来自Eric S. Raymond，我忍不住转存下来。&lt;/p&gt;
&lt;h2&gt;什么是黑客&lt;/h2&gt;
&lt;p&gt;Jargon File 包含了一大堆关于“hacker”这个词的定义，大部分与技术高超和热衷解决问题 及超越极限有关。但如果你只想知道如何 成为 一名黑客， 那么只有两件事情确实相关。&lt;/p&gt;
&lt;p&gt;这可以追溯到几十年前第一台分时小型电脑诞生, ARPAnet 实验也刚展开的 年代，那时有一个由程序设计专家和网络名人所组成的, 具有分享特点的文化社群。 这种文化的成员创造了 “hacker” 这个名词。黑客们建立了 Internet。 黑客们发明出了现在使用的 UNIX 操作系统。黑客们使 Usenet 运作起来， 黑客们让 WWW 运转起来。如果你是这个文化的一部分，如果你对这种文化有所贡献，而且 这个社群的其它成员也认识你并称你为 hacker, 那么你就是一位黑客。&lt;/p&gt;
&lt;p&gt;黑客精神并不仅仅局限在软件的黑客文化中。 有人用黑客态度对待其它事情，如电子学和音乐—— 事实上，你可以在任何最高级别的科学和艺术活动中发现它。 精于软件的黑客赞赏这些在其他领域的同类并把他们也称作黑客—— 有人宣称黑客天性是绝对独立于他们工作的特定领域的。 但在这份文档中， 我们将注意力集中在软件黑客的技术和态度， 以及发明了“黑客”一词的以共享为特征的文化传统之上。&lt;/p&gt;
&lt;p&gt;有一群人大声嚷嚷着自己是黑客，但他们不是。 他们（主要是正值青春的少年）是一些蓄意破坏计算机和电话系统的人。 真正的黑客把这些人叫做“骇客”(cracker)，并不屑与之为伍。 多数真正的黑客认为骇客们又懒又不负责任，还没什么大本事。 专门以破坏别人安全为目的的行为并不能使你成为一名黑客， 正如 用铁丝偷开走汽车并不能使你成为一个汽车工程师。 不幸的是，很多记者和作家往往错把“骇客”当成黑客； 这种做法一直使真正的黑客感到恼火。&lt;/p&gt;
&lt;p&gt;根本的区别是：黑客搞建设，骇客搞破坏。&lt;/p&gt;
&lt;p&gt;如果你想成为一名黑客，请接着读下去。如果你想做一个骇客，去读 alt.2600 新闻组，并在意识到你并不像自己想象的那么聪明后去坐五到十次监狱。 关于骇客，我只想说这么多。&lt;/p&gt;
&lt;h2&gt;黑客应有的态度&lt;/h2&gt;
&lt;p&gt;黑客们解决问题，建设事物，同时他们崇尚自由和无私的双向帮助。 要被他人承认是一名黑客，你的行为得体现出你好像具备了这种态度一般。 而要想做得好象你具备这种态度一般，你就得切切实实坚持它。&lt;/p&gt;
&lt;p&gt;但是如果你认为培养黑客态度只是一条在黑客文化圈中得到承认的路子， 那就大错特错了。成为具备这些特质的这种人对 你自己非常重要——有助于你学习，及给你提供源源不断的动力。 同所有创造性的艺术一样，成为大师
的最有效方法就是模仿大师的精神—— 不仅从智力上，也要从感情上进行模仿。&lt;/p&gt;
&lt;p&gt;或许, 下面这首现代的禅诗很好的阐述了这个意思：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;follow&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;（沿着这样一条道路：）&lt;/span&gt;

&lt;span class="n"&gt;look&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;（寻找大师，）&lt;/span&gt;

&lt;span class="n"&gt;follow&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;（跟随大师，）&lt;/span&gt;

&lt;span class="n"&gt;walk&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;（与大师通行，）&lt;/span&gt;

&lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;（洞察大师，）&lt;/span&gt;

&lt;span class="n"&gt;become&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;（成为大师。）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;嗯，如果你想成为一名黑客，反复读下面的事情直至你相信它们。&lt;/p&gt;
&lt;h3&gt;1，世界充满了待解决的迷人问题&lt;/h3&gt;
&lt;p&gt;做一名黑客会有很多乐趣，但却是要费很多气力方能得到的乐趣。 这些努力需要动力。成功的运动员从锻炼身体、超越自我极限的愉悦中得到动力。 同样，做黑客，你得能从解决问题，磨练技术及锻炼智力中得到基本的乐趣。&lt;/p&gt;
&lt;p&gt;如果你还不是天生的这类人又想做黑客，你就要设法成为这样的人。 否则你会发现，你的黑客热情会被其他分心的事物吞噬掉——如金钱、性和社会上的虚名。&lt;/p&gt;
&lt;p&gt;同样你必须对你自己的学习能力建立信心——相信尽管当你对某问题近乎一无所知， 但只要你一点一点地试验、学习，最终会掌握并解决它：&lt;/p&gt;
&lt;h3&gt;2，一个问题不应该被解决两次。&lt;/h3&gt;
&lt;p&gt;聪明的脑袋是宝贵的有限的资源。当世界还充满非常多有待解决的有趣的新问题时， 它们不应该被浪费在重新发明轮子这类事情上。&lt;/p&gt;
&lt;p&gt;作为一名黑客，你必须相信其他黑客的思考时间是宝贵的——因此共享信息， 解决问题并发布结果给其他黑客几乎是一种道义，这样其他人就可以去解决 新问题而不是不断地忙于对付旧问题。&lt;/p&gt;
&lt;p&gt;(你不必认为一定要把你 所有的发明创造公布出去， 但这样做的黑客是赢得大家极度尊敬的人。卖些钱来养家糊口，租房买计算机 甚至发大财和黑客价值观也是相容的，只要你别忘记你还是个黑客。)&lt;/p&gt;
&lt;h3&gt;3，无聊和乏味的工作是罪恶。&lt;/h3&gt;
&lt;p&gt;黑客（泛指具有创造力的人们）应该从来不会被愚蠢的重复性劳动所困扰， 因为当这种事情发生时就意味着他们没有在做只有他们才能做的事情—— 解决新问题。这样的浪费伤害每一个人。因此，无聊和乏味的工作不仅仅是 令人不舒服而已，而且是罪恶。&lt;/p&gt;
&lt;p&gt;作为一个黑客，你必须坚信这点并尽可能多地将乏味的工作自动化， 不仅为你自己，也为了其他人（尤其是其他黑客们）。&lt;/p&gt;
&lt;p&gt;(对此有一个明显的例外。黑客有时也做一些在他人看来是重复性或枯燥的工作 以进行“脑力休息”，或是为了获得某种技能，或是获得一些除此以外无法获得的 特别经验。但这是自愿的——有脑子的人不应该被迫做无聊的活儿。）&lt;/p&gt;
&lt;h3&gt;4，自由万岁。&lt;/h3&gt;
&lt;p&gt;黑客们是天生的反独裁主义者。 任何能向你发命令的人能够迫使你停止解决令你着迷的问题， 同时，按照独裁者的一般思路，他通常会给出一些极端愚昧的理由。 因此，不论何处，任何独裁主义的作法，只要它压迫你和其他黑客，你就要和它斗到底。&lt;/p&gt;
&lt;p&gt;(这并非向所有权威挑战。儿童需要监护，罪犯要被看管起来。 如果服从命令得到某种东西比起用其他方式得到它更节约时间，黑客可以同意 接受某种形式的权威。但这是一个有限度的，有意的交易； 那种权威想要的个人服从不是你应该同意给予的。)&lt;/p&gt;
&lt;p&gt;权威喜欢审查和保密。他们不信任自愿的合作和信息的共享—— 他们只喜欢由他们控制的所谓“合作”。因此，作为一个黑客， 你得对审查、保密，以及使用武力或欺骗去压迫有行为能力的人们的做法有一种本能的敌意。 同时你要有为此信念斗争的意愿。&lt;/p&gt;
&lt;h3&gt;5，态度不能替代能力。&lt;/h3&gt;
&lt;p&gt;作为一名黑客，你必须培养起这些态度。 但只具备这些态度并不能使你成为一名黑客，也不能使你成为一个运动健将和摇滚明星。 成为一名黑客需要智力，实践，奉献精神和辛苦工作。&lt;/p&gt;
&lt;p&gt;因此，你必须学会怀疑，并尊重各种各样的能力。 黑客们不会为那些装模做样的人浪费时间，但他们却非常尊重能力—— 尤其是从事黑客工作的能力，不过任何能力总归是好的。 具备很少人能具备的那些方面的能力尤其好，其中具备 涉及脑力、技巧和专注方面能力的当然最好。&lt;/p&gt;
&lt;p&gt;尊敬能力，你就会享受到提高自己能力的乐趣—— 辛苦的工作和奉献会变成一种高度娱乐而非苦差事。 要想成为一名黑客，这一点非常重要。&lt;/p&gt;
&lt;h2&gt;黑客的基本技能&lt;/h2&gt;
&lt;p&gt;黑客态度重要，但技术更加重要。 态度无法替代技术，在你被别的黑客称为黑客之前，有一些基本的技术你必须掌握。&lt;/p&gt;
&lt;p&gt;这些基本技术随着新技术的出现和老技术的过时也随时间在缓慢改变。 例如，过去内容包括使用机器语言编程，而直到最近才包括了HTML。 总的来说现在主要包括以下技术：&lt;/p&gt;
&lt;h3&gt;1，学习如何编程。&lt;/h3&gt;
&lt;p&gt;这当然是最基本的黑客技能。如果你还不会任何编程语言，我建议你从Python开始。 它设计清晰，文档齐全，合适初学者入门。 它是一门很好的入门语言，并且不仅仅只是个玩具； 它非常强大、灵活，也适合做大型项目。 &lt;/p&gt;
&lt;p&gt;我有一篇 Python评价详细说明这点。好的 教程 可以在Python网站 得到。 （译者：比较好的中文Python站点可能是http://pythonrecord.51.net。）&lt;/p&gt;
&lt;p&gt;Java也是好的入门语言。它比Python难得多，但是生成的代码速度也快得多。 它同时也是一种优秀的计算机语言，不止是用来入门。&lt;/p&gt;
&lt;p&gt;但是注意，如果你只会一两门语言，你将不会达到黑客所要求的技术水平， 甚至也不能达到一个程序员的水平——你需要学会如何以抽象的方式思考编程问题， 独立于任何语言。要做一名真正的黑客，你需要学会在几天内通过一些手册， 结合你现在所知，迅速掌握一门新语言。这意味着你应该学会几种截然不同的语言。&lt;/p&gt;
&lt;p&gt;如果要做一些重要的编程工作，你将不得不学习C语言，Unix的核心语言。 C++与C非常其他类似；如果你了解其中一种，学习另一种应该不难。 但这两种都不适合编程入门者学习。而且事实上，你越避免用C编程，你的工作效率会越高。&lt;/p&gt;
&lt;p&gt;C非常有效率，节约你的机器资源。不幸的是，C的高效是通过你手动做很多底层的管理 （如内存）来达到的。底层代码都是复杂极易出现bug的，会使你花极多的时间调试。 如今的机器速度如此之快，这通常是得不偿失——比较明智的做法是使用一种运行较慢、较低 效率，但大幅节省你的时间的语言。因此，选择Python。&lt;/p&gt;
&lt;p&gt;其他对黑客而言比较重要的语言包括 Perl 和 LISP 。 Perl实用，值得一学；它被广泛用于动态网页和系统管理， 因此即便你从不用Perl写程序，至少也应该学会看。许多人使用Perl的理由和 我建议你使用Python的理由一样，都是为了避免用C完成那些不需要C高效率的工作。 你会需要理解那些工作的代码的。&lt;/p&gt;
&lt;p&gt;LISP值得学习的理由不同——最终掌握了它时你会得到丰富的启迪和经验。 这些经验会使你在以后的日子里成为一个更好的程序员，即使你实际上很少使用LISP本身。&lt;/p&gt;
&lt;p&gt;当然，实际上你最好五种都会（Python，Java，C/C++，Perl和LISP）。 除了是最重要的黑客语言外，它们还代表了截然不同的编程思路和方法，每种都会让你受益非浅。&lt;/p&gt;
&lt;p&gt;这里我无法给你完完全全的指导教会你如何编程——这是个复杂的技能。 但我可以告诉你，书本和上课也不能做到（最好的黑客中，有许多，也许 几乎都是自学成材的）。 你可以从书本上学到语言的特点——只是一些皮毛， 但
要使书面知识成为自身技能只能通过实践和虚心向他人学习。 因此要作到 （一）读代码及（二）写代码。&lt;/p&gt;
&lt;p&gt;学习如何编程就象学习用优美的自然语言写作一样。 最好的做法是读一些大师的名著，试着自己写点东西，再读
些，再写点，再读些，再写点…… 如此往复，直到你的文章达到你体会到的范文的简洁和力量。&lt;/p&gt;
&lt;p&gt;过去找到适合阅读的好的代码是困难的，因为几乎没有大型程序的源代码能让新手练手。 这种状况已经戏剧性地发生变化；开放源代码软件，编程工具和操作系统（全都由黑客写成）现在已经 随处可见。让我们在下一个话题中继续讨论……&lt;/p&gt;
&lt;h3&gt;2，得到一个开放源代码的Unix 并学会使用、运行它。&lt;/h3&gt;
&lt;p&gt;我假设你已经拥有或者能使用一台个人电脑（今天的孩子们真幸福 :-) ）。新手们能够朝学习黑客技能迈出的最基本的一步就是得到 一份Linux或BSD-Unix的一种，安装在个人电脑上，并运行它。&lt;/p&gt;
&lt;p&gt;没错，这世界上除了Unix还有其他操作系统。 但它们都是以二进制形式发布的——你无法读到它的源代码，也不可
能修改它。 尝试在运行DOS或Windows或MacOS的机器上学习黑客技术，就象是带着脚镣学跳舞。&lt;/p&gt;
&lt;p&gt;除此之外，Unix还是Internet的操作系统。 你可以学会上网却不知道Unix，但你不了解Unix就无法成为一名Internet黑客。 因此，今天的黑客文化在很大程度上是以Unix为中心的。（这点并不总是真的， 一些很早的黑客对此一直很不高兴，但Unix和Internet之间的联系已是如此之强， 甚至连Microsoft也无可奈何。）&lt;/p&gt;
&lt;p&gt;所以, 安装一套UNIX——我个人喜爱LINUX但还有其他种类的 （是的，你可以同时安装Linux及DOS/Windows在同一电脑上)。 学习它，使用它，配置它。用它在Internet上冲浪。阅读它的源代码。修改它的源代码。 你会得到比在Microsoft操作系统上更好的编程工具（包括C，LISP，Python及Perl）。 你会觉得乐趣无穷，学到在你成为大师之前意识不到的更多的知识。&lt;/p&gt;
&lt;p&gt;想知道更多关于学习Unix的信息，访问 The Loginataka 。&lt;/p&gt;
&lt;p&gt;想知道如何得到一份Linux，访问 我在哪里可以获得Linux 。 （译者：对于中文读者来讲，最简单的方式未过
于前往附近的D版/正版光盘店。）&lt;/p&gt;
&lt;p&gt;你可以在 www.bsd.org 找到BSD Unix的求助及其他资源。&lt;/p&gt;
&lt;p&gt;我有写一篇关于 Unix和Internet基础 的入门文章。&lt;/p&gt;
&lt;p&gt;（注：如果你是一个新手，我不推荐自己独立安装Linux或者BSD。 安装Linux的话，寻求本地Linux用户组的帮助；或联系 Open Projects Network 。 LISC维护着一些 IRC频道 ， 在那里你可以获得帮助。）&lt;/p&gt;
&lt;h3&gt;3，学会如何使用WWW和写HTML&lt;/h3&gt;
&lt;p&gt;黑客文化建造的大多东西都在你看不见的地方发挥着作用，帮助工厂、办公室和大学正常运转， 表面上很难看到它对非黑客的普通人的生活的影响。Web是一个大大的例外。 即便政客也同意，这个巨大耀眼的黑客玩具正在改变整个世界。 单是这个原因（还有许多其它的），你就需要学习掌握Web。&lt;/p&gt;
&lt;p&gt;这并不是仅仅意味着如何使用浏览器（谁都会），而是要学会如何写HTML， Web的标记语言。如果你不会编程，写HTML会教你一些有助于学习的思考习惯。 因此，先完成一个主页。（网上有很多好的教程； 这是一个 。)&lt;/p&gt;
&lt;p&gt;但仅仅拥有一个主页不能使你成为一名黑客。 Web里充满了各种网页。大多数是毫无意义的，零信息量垃圾——界面时髦的垃圾， 注意，垃圾的水准都类似（更多信息访问 The HTML Hell Page ）。&lt;/p&gt;
&lt;p&gt;要想有价值，你的网页必须有内容—— 它必须有趣或对其它黑客有帮助。这是下一个话题所涉及的……&lt;/p&gt;
&lt;h3&gt;4，如果你不懂实用性的英语，学习吧&lt;/h3&gt;
&lt;p&gt;作为一个美国人和一个以英语为母语的人，我以前很不情愿提到这点，免得成为 一种文化上的帝国主义。但相当多以其他语言为母语的人一直劝我指出这一点，那就是 英语是黑客文化和Internet的工作语言，你需要懂得以
便在黑客社区顺利工作。&lt;/p&gt;
&lt;p&gt;这一点千真万确。大概1991年的时候我就了解到许多黑客在技术讨论中使用英语，甚至当他们的母语都 相同，英语对他们而言只是第二语言的时候；据我知道的报导，当前英语有着比其他语言丰富得多的技术词汇， 因此是一个对于工作来说相当好的工具。 基于类似的原因，英文技术书籍的翻译通常不令人满意（如果有翻译的话）。&lt;/p&gt;
&lt;p&gt;Linus Torvalds，一个芬兰人，用英语注释他的代码（很明显这对他来说不是凑巧）。 他流利的英语成为他能够管理全球范围的Linux开发人员社区的重要因素。 这是一个值得学习的例子。&lt;/p&gt;
&lt;h2&gt;黑客文化中的地位&lt;/h2&gt;
&lt;p&gt;像大部分不涉及金钱的文化一样，黑客王国靠声誉运转。 你设法解决有趣的问题，但它们到底多有趣，你的解法有多好， 是要由那些和你具有同样技术水平的人或比你更厉害的人去评判的。&lt;/p&gt;
&lt;p&gt;相应地，当你在玩黑客游戏时，你得认识到你的分数主要靠其他黑客对你的技术的评价给出 （这就是为什么只有在其它黑客称你为黑客时，你才算得上是一名黑客）。 这个事实常会被黑客是一项孤独的工作这一印象所减弱；也会被另一个黑客文化的禁忌所减弱 （现在逐渐减弱但仍强大）：拒绝承认自我或外部评估与一个人的动力有关系。&lt;/p&gt;
&lt;p&gt;特别地，黑客王国被人类学家们称为一种奉献文化。 在这里你不是凭借你对别人的统治来建立地位和名望，也不是靠美貌，或拥有其他人想要的东西， 而是靠你的奉献。尤其是奉献你的时间，你的创造和你的技术成果。
要获得其他黑客的尊敬，基本上有五种事情你可以干：&lt;/p&gt;
&lt;h3&gt;1，写开放源代码软件&lt;/h3&gt;
&lt;p&gt;第一个（也是最集中的和传统的）是写些被其他黑客认为有趣或有用的程序， 并把程序源代码提供给整个黑客文化使用。&lt;/p&gt;
&lt;p&gt;（过去我们称之为“free software （自由软件）”， 但这却使很多不知 free 的精确含义的人感到困惑。 现在我们很多人，根据搜索引擎网页内容分析至少有2：1的比率，使用“ open-source ”software（开放源代码软件）这个词）。&lt;/p&gt;
&lt;p&gt;黑客王国里最受尊敬的偶像是那些写了大型的、好用的、具有广泛用途的软件， 并把它们公布出去，使得每人都
在使用他软件的人。&lt;/p&gt;
&lt;h3&gt;2，帮助测试并调试开放源代码软件&lt;/h3&gt;
&lt;p&gt;黑客也尊敬那些使用、测试开放源代码软件的人。 在这个并非完美的世界上，我们不可避免地要花大多数的开发时间在调试阶段。 这就是为什么任何有头脑的开放源代码的作者都会告诉你好的beta测试员 （知道如何清楚描述出错症状，很好地定位错误，能忍受快速发布中的bug， 并且愿意使用一些简单的诊断工具）象红宝石一样珍贵。 甚至他们中的一个能判断出哪个测试阶段是延长的， 哪个是令人精疲力尽的噩梦，哪个只是一个有益的小麻烦。&lt;/p&gt;
&lt;p&gt;如果你是个新手，试着找一个你感兴趣的正在开发的程序，做一个好的beta测试员。 你会自然地从帮着测试，进
步到帮着抓臭虫，到最后帮着改程序。 你会从中学到很多，并且与未来会帮你的人结下友谊。&lt;/p&gt;
&lt;h3&gt;3，公布有用的信息&lt;/h3&gt;
&lt;p&gt;另一个好事是收集整理有用有趣的信息做成网页或文档如FAQ列表，且让他们容易获得。&lt;/p&gt;
&lt;p&gt;主要技术FAQ的维护者受到几乎同其他开放源代码的作者一样多的尊敬。&lt;/p&gt;
&lt;h3&gt;4，帮助维护基础设施的运转&lt;/h3&gt;
&lt;p&gt;黑客文化（还有Internet的工程方面的发展，就此而言）是靠自愿者运转的。 要使Internet能正常工作，就要有大量枯燥的工作不得不去完成——管理mail list，新闻组，维护大型软件库，开发RFC和其它技术标准等等。
做这类事情的人会得到很多尊敬，因为每人都知道这些事情是十分花时间又不象编程那样好玩。 做这些事情需要奉献精神。&lt;/p&gt;
&lt;h3&gt;5，为黑客文化本身服务&lt;/h3&gt;
&lt;p&gt;最后，你可以为这个文化本身做宣传（例如，象我这样，写一个“如何成为黑客”的正面的教程 :-) ） （译者：不知道Barret把它翻成中文算不算？）。 这并非一定要在你已经在这个圈子呆了很久，因以上四点中的某点而出名，有一定声誉后才能去做。&lt;/p&gt;
&lt;p&gt;黑客文化没有领袖。精确地说，它确实有些文化英雄、部落长者、历史学家和发言人。 若你在这圈内呆的够长，你或许成为其中之一。 记住：黑客们不相信他们的部落长者的自夸的炫耀， 因此大举追求这种名誉是危险的。与其奋力追求，不如先摆正自己的位置 等它自己到你的手中——那时则要做到谦虚和优雅。&lt;/p&gt;
&lt;h2&gt;黑客和书呆子(Nerd)的联系&lt;/h2&gt;
&lt;p&gt;同流行的迷思相反，做一名黑客并不一定要你是个书呆子。 但它确实有帮助，而且许多黑客事实上是书呆子。 做
一个深居简出的人有助于你集中精力进行十分重要的事情，如思考和编程。&lt;/p&gt;
&lt;p&gt;因此，很多黑客都愿意接受“书呆子”这个外号， 更有甚者使用更尖刻的“geek（怪人）”一词并引以为豪—— 这是一种宣布他们独立于主流社会的声明方式。访问 The Geek Page 参加更多的讨论。&lt;/p&gt;
&lt;p&gt;如果你能集中足够的精力做好黑客工作同时还能有正常的生活，这很好。 现在作到这一点比我在1970年代是新手的时候要容易的多； 如今主流文化对技术怪人要友善的多。 甚至有越来越多的人意识到黑客通常是很好的恋人和配偶的材料。&lt;/p&gt;
&lt;p&gt;如果你因为生活上不如意而迷上做黑客，那也没什么——至少你不会分神了。 或许以后你会找到自己的另一半。
风格的意义&lt;/p&gt;
&lt;p&gt;重申一下，作为一名黑客，你必须进入黑客精神之中。 当你不在计算机边上时，你仍然有很多对黑客工作有帮助的事情可做。 它们并不能替代真正的编程（没有什么能），但很多黑客都那么做， 并感到它们与黑客的本质存在某些基本的连系。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;学会流畅地用母语写作。尽管程序员不能写好文章的错误看法相当普遍， 但是有令人惊讶数目的黑客（包括所有我知道的最棒的）都是不错的作家。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阅读科幻小说。参加科幻小说讨论会。（一个碰到黑客和未来会成为黑客的人的好方法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学禅，并且/或者练功习武。（精神修炼看来是惊人相似。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;练就能分析音乐的听觉，学会鉴赏特别的音乐。学会玩某种乐器，或唱歌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提高对双关语、文字游戏的鉴赏能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些事情，你已经做的越多，你就越是天生做黑客的材料。 至于为什么偏偏是这些事情，原因并不完全清楚， 但它们都涉及用到左－右脑能力的综合，这似乎是关键所在 （黑客们既需要清晰的逻辑思维，有时又需要偏离逻辑
跳出问题的表象）。&lt;/p&gt;
&lt;p&gt;最后，还有一些不要去做的事情。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不要使用愚蠢的，哗众取宠的ID或昵称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要卷入Usenet（或其他地方的论坛）的骂战。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要自称为“cyberpunk（网络叛客）”，也不要浪费时间和那些人打交道。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要让你寄出的Email或张贴的帖子充满错误的拼写和乱七八糟的语法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;做以上的事情，只会招来嘲笑。黑客们个个记忆超群—— 你将需要数年的时间让他们忘记你犯下的错误。&lt;/p&gt;
&lt;p&gt;网名的问题值得深思。将身份隐藏在虚假的名字后是骇客、解密者、d00dz 及其他低等生物幼稚愚蠢的行为特点。黑客不会做这些事； 他们对他们所作的感到骄傲，而且乐于人们将作品与他们的 真名相联系。 因此, 若你现在用假名，放弃它。在黑客文化里它会令你你失败的。&lt;/p&gt;</summary><category term="黑客"></category></entry></feed>